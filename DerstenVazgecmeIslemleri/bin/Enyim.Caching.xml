<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enyim.Caching</name>
    </assembly>
    <members>
        <member name="M:Enyim.Caching.Memcached.ITranscoder.Serialize(System.Object)">
            <summary>
            Serializes an object for storing in the cache.
            </summary>
            <param name="o">The object to serialize</param>
            <returns>The serialized object</returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.ITranscoder.Deserialize(Enyim.Caching.Memcached.CacheItem)">
            <summary>
            Deserializes the <see cref="T:CacheItem"/> into an object.
            </summary>
            <param name="item">The stream that contains the data to deserialize.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="P:Enyim.Caching.Memcached.ItemOperation.HashedKey">
            <summary>
            Gets the hashed bersion of the key which should be used as key in communication with memcached
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedNode.Ping">
            <summary>
            Gets a value indicating whether the server is working or not.
            
            If the server is not working, and the "being dead" timeout has been expired it will reinitialize itself.
            </summary>
            <remarks>It's possible that the server is still not up &amp; running so the next call to <see cref="M:Acquire"/> could mark the instance as dead again.</remarks>
            <returns></returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedNode.Acquire">
            <summary>
            Acquires a new item from the pool
            </summary>
            <returns>An <see cref="T:PooledSocket"/> instance which is connected to the memcached server, or <value>null</value> if the pool is dead.</returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedNode.Dispose">
            <summary>
            Releases all resources allocated by this instance
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.MemcachedNode.IsAlive">
            <summary>
            <para>Gets a value indicating whether the server is working or not. Returns a <b>cached</b> state.</para>
            <para>To get real-time information and update the cached state, use the <see cref="M:Ping"/> method.</para>
            </summary>
            <remarks>Used by the <see cref="T:ServerPool"/> to quickly check if the server's state is valid.</remarks>
        </member>
        <member name="F:Enyim.Caching.Memcached.MemcachedNode.InternalPoolImpl.freeItems">
            <summary>
            A list of already connected but free to use sockets
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedNode.InternalPoolImpl.Acquire">
            <summary>
            Acquires a new item from the pool
            </summary>
            <returns>An <see cref="T:PooledSocket"/> instance which is connected to the memcached server, or <value>null</value> if the pool is dead.</returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedNode.InternalPoolImpl.ReleaseSocket(Enyim.Caching.Memcached.PooledSocket)">
            <summary>
            Releases an item back into the pool
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedNode.InternalPoolImpl.Dispose">
            <summary>
            Releases all resources allocated by this instance
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.DefaultNodeLocator">
            <summary>
            This is a ketama-like consistent hashing based node locator. Used when no other <see cref="T:IMemcachedNodeLocator"/> is specified for the pool.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.IMemcachedNodeLocator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Enyim.Caching.Configuration.ISocketPoolConfiguration.MinPoolSize">
            <summary>
            Gets or sets a value indicating the minimum amount of sockets per server in the socket pool.
            </summary>
            <returns>The minimum amount of sockets per server in the socket pool.</returns>
        </member>
        <member name="P:Enyim.Caching.Configuration.ISocketPoolConfiguration.MaxPoolSize">
            <summary>
            Gets or sets a value indicating the maximum amount of sockets per server in the socket pool.
            </summary>
            <returns>The maximum amount of sockets per server in the socket pool.</returns>
        </member>
        <member name="P:Enyim.Caching.Configuration.ISocketPoolConfiguration.ConnectionTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which the connection attempt will fail.
            </summary>
            <returns>The value of the connection timeout.</returns>
        </member>
        <member name="P:Enyim.Caching.Configuration.ISocketPoolConfiguration.DeadTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which an unresponsive (dead) server will be checked if it is working.
            </summary>
            <returns>The value of the dead timeout.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.#ctor">
            <summary>
            Initializes a new MemcachedClient instance using the default configuratino section (enyim/memcached).
            </summary>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.#ctor(System.String)">
            <summary>
            Initializes a new MemcacedClient instance using the specified configuration section. 
            This overload allows to create multiple MemcachedClients with different pool configurations.
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Remove(System.String)">
            <summary>
            Removes the specified item from the cache.
            </summary>
            <param name="key">The identifier for the item to delete.</param>
            <returns>true if the item was successfully removed from the cache; false otherwise.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Get(System.String)">
            <summary>
            Retrieves the specified item from the cache.
            </summary>
            <param name="key">The identifier for the item to retrieve.</param>
            <returns>The retrieved item, or <value>null</value> if the key was not found.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Get``1(System.String)">
            <summary>
            Retrieves the specified item from the cache.
            </summary>
            <param name="key">The identifier for the item to retrieve.</param>
            <returns>The retrieved item, or <value>null</value> if the key was not found.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Increment(System.String,System.UInt32)">
            <summary>
            Increments the value of the specified key by the given amount. The operation is atomic and happens on the server.
            </summary>
            <param name="key">The identifier for the item to increment.</param>
            <param name="amount">The amount by which the client wants to increase the item.</param>
            <returns>The new value of the item or -1 if not found.</returns>
            <remarks>The item must be inserted into the cache before it can be changed. The item must be inserted as a <see cref="T:System.String"/>. The operation only works with <see cref="T:System.UInt32"/> values, so -1 always indicates that the item was not found.</remarks>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Decrement(System.String,System.UInt32)">
            <summary>
            Increments the value of the specified key by the given amount. The operation is atomic and happens on the server.
            </summary>
            <param name="key">The identifier for the item to increment.</param>
            <param name="amount">The amount by which the client wants to decrease the item.</param>
            <returns>The new value of the item or -1 if not found.</returns>
            <remarks>The item must be inserted into the cache before it can be changed. The item must be inserted as a <see cref="T:System.String"/>. The operation only works with <see cref="T:System.UInt32"/> values, so -1 always indicates that the item was not found.</remarks>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Store(Enyim.Caching.Memcached.StoreMode,System.String,System.Object)">
            <summary>
            Inserts an item into the cache with a cache key to reference its location.
            </summary>
            <param name="mode">Defines how the item is stored in the cache.</param>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <remarks>The item does not expire unless it is removed due memory pressure.</remarks>
            <returns>true if the item was successfully stored in the cache; false otherwise.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Store(Enyim.Caching.Memcached.StoreMode,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inserts a range of bytes (usually memory area or serialized data) into the cache with a cache key to reference its location.
            </summary>
            <param name="mode">Defines how the item is stored in the cache.</param>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The data to be stored.</param>
            <param name="offset">A 32 bit integer that represents the index of the first byte to store.</param>
            <param name="length">A 32 bit integer that represents the number of bytes to store.</param>
            <remarks>The item does not expire unless it is removed due memory pressure.</remarks>
            <returns>true if the item was successfully stored in the cache; false otherwise.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Store(Enyim.Caching.Memcached.StoreMode,System.String,System.Object,System.TimeSpan)">
            <summary>
            Inserts an item into the cache with a cache key to reference its location.
            </summary>
            <param name="mode">Defines how the item is stored in the cache.</param>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <param name="validFor">The interval after the item is invalidated in the cache.</param>
            <returns>true if the item was successfully stored in the cache; false otherwise.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Store(Enyim.Caching.Memcached.StoreMode,System.String,System.Object,System.DateTime)">
            <summary>
            Inserts an item into the cache with a cache key to reference its location.
            </summary>
            <param name="mode">Defines how the item is stored in the cache.</param>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <param name="expiresAt">The time when the item is invalidated in the cache.</param>
            <returns>true if the item was successfully stored in the cache; false otherwise.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Store(Enyim.Caching.Memcached.StoreMode,System.String,System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Inserts a range of bytes (usually memory area or serialized data) into the cache with a cache key to reference its location.
            </summary>
            <param name="mode">Defines how the item is stored in the cache.</param>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The data to be stored.</param>
            <param name="offset">A 32 bit integer that represents the index of the first byte to store.</param>
            <param name="length">A 32 bit integer that represents the number of bytes to store.</param>
            <param name="validFor">The interval after the item is invalidated in the cache.</param>
            <returns>true if the item was successfully stored in the cache; false otherwise.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Store(Enyim.Caching.Memcached.StoreMode,System.String,System.Byte[],System.Int32,System.Int32,System.DateTime)">
            <summary>
            Inserts a range of bytes (usually memory area or serialized data) into the cache with a cache key to reference its location.
            </summary>
            <param name="mode">Defines how the item is stored in the cache.</param>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The data to be stored.</param>
            <param name="offset">A 32 bit integer that represents the index of the first byte to store.</param>
            <param name="length">A 32 bit integer that represents the number of bytes to store.</param>
            <param name="expiresAt">The time when the item is invalidated in the cache.</param>
            <returns>true if the item was successfully stored in the cache; false otherwise.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Append(System.String,System.Byte[])">
            <summary>
            Appends the data to the end of the specified item's data.
            </summary>
            <param name="key">The key used to reference the item.</param>
            <param name="data">The data to be stored.</param>
            <returns>true if the data was successfully stored; false otherwise.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Prepend(System.String,System.Byte[])">
            <summary>
            Inserts the data before the specified item's data.
            </summary>
            <returns>true if the data was successfully stored; false otherwise.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.CheckAndSet(System.String,System.Object,System.UInt64)">
            <summary>
            Updates an item in the cache with a cache key to reference its location, but only if it has not been changed since the last retrieval. The invoker must pass in the value returned by <see cref="M:MultiGet"/> called "cas" value. If this value matches the server's value, the item will be updated; otherwise the update fails.
            </summary>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <param name="cas">The unique value returned by <see cref="M:MultiGet"/>.</param>
            <remarks>The item does not expire unless it is removed due memory pressure.</remarks>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.CheckAndSet(System.String,System.Byte[],System.Int32,System.Int32,System.UInt64)">
            <summary>
            Updates an item in the cache with a cache key to reference its location, but only if it has not been changed since the last retrieval. The invoker must pass in the value returned by <see cref="M:MultiGet"/> called "cas" value. If this value matches the server's value, the item will be updated; otherwise the update fails.
            </summary>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The data to be stored.</param>
            <param name="offset">A 32 bit integer that represents the index of the first byte to store.</param>
            <param name="length">A 32 bit integer that represents the number of bytes to store.</param>
            <param name="cas">The unique value returned by <see cref="M:MultiGet"/>.</param>
            <remarks>The item does not expire unless it is removed due memory pressure.</remarks>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.CheckAndSet(System.String,System.Object,System.UInt64,System.TimeSpan)">
            <summary>
            Updates an item in the cache with a cache key to reference its location, but only if it has not been changed since the last retrieval. The invoker must pass in the value returned by <see cref="M:MultiGet"/> called "cas" value. If this value matches the server's value, the item will be updated; otherwise the update fails.
            </summary>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <param name="cas">The unique value returned by <see cref="M:MultiGet"/>.</param>
            <param name="validFor">The interval after the item is invalidated in the cache.</param>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.CheckAndSet(System.String,System.Object,System.UInt64,System.DateTime)">
            <summary>
            Updates an item in the cache with a cache key to reference its location, but only if it has not been changed since the last retrieval. The invoker must pass in the value returned by <see cref="M:MultiGet"/> called "cas" value. If this value matches the server's value, the item will be updated; otherwise the update fails.
            </summary>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <param name="cas">The unique value returned by <see cref="M:MultiGet"/>.</param>
            <param name="expiresAt">The time when the item is invalidated in the cache.</param>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.CheckAndSet(System.String,System.Byte[],System.Int32,System.Int32,System.UInt64,System.TimeSpan)">
            <summary>
            Updates an item in the cache with a cache key to reference its location, but only if it has not been changed since the last retrieval. The invoker must pass in the value returned by <see cref="M:MultiGet"/> called "cas" value. If this value matches the server's value, the item will be updated; otherwise the update fails.
            </summary>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The data to be stored.</param>
            <param name="offset">A 32 bit integer that represents the index of the first byte to store.</param>
            <param name="length">A 32 bit integer that represents the number of bytes to store.</param>
            <param name="cas">The unique value returned by <see cref="M:MultiGet"/>.</param>
            <param name="validFor">The interval after the item is invalidated in the cache.</param>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.CheckAndSet(System.String,System.Byte[],System.Int32,System.Int32,System.UInt64,System.DateTime)">
            <summary>
            Updates an item in the cache with a cache key to reference its location, but only if it has not been changed since the last retrieval. The invoker must pass in the value returned by <see cref="M:MultiGet"/> called "cas" value. If this value matches the server's value, the item will be updated; otherwise the update fails.
            </summary>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The data to be stored.</param>
            <param name="offset">A 32 bit integer that represents the index of the first byte to store.</param>
            <param name="length">A 32 bit integer that represents the number of bytes to store.</param>
            <param name="cas">The unique value returned by <see cref="M:MultiGet"/>.</param>
            <param name="expiresAt">The time when the item is invalidated in the cache.</param>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.FlushAll">
            <summary>
            Removes all data from the cache.
            </summary>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Stats">
            <summary>
            Returns statistics about the servers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Get(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves multiple items from the cache.
            </summary>
            <param name="keys">The list of identifiers for the items to retrieve.</param>
            <returns>a Dictionary holding all items indexed by their key.</returns>
        </member>
        <member name="T:Enyim.Reflection.FastActivator">
            <summary>
            <para>Implements a very fast object factory for dynamic object creation. Dynamically generates a factory class whihc will use the new() constructor of the requested type.</para>
            <para>Much faster than using Activator at the price of the first invocation being significantly slower than subsequent calls.</para>
            <remarks>Only supports parameterless constructors.</remarks>
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.PooledSocket.InstanceId">
            <summary>
            The ID of theis instance. Used by the <see cref="T:MemcachedServer"/> to identify the instance in its inner lists.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.PooledSocket.Destroy">
            <summary>
            Releases all resources used by this instance and shuts down the inner <see cref="T:Socket"/>. This instance will not be usable anymore.
            </summary>
            <remarks>Use the IDisposable.Dispose method if you want to release this instance back into the pool.</remarks>
        </member>
        <member name="M:Enyim.Caching.Memcached.PooledSocket.ReadLine">
            <summary>
            Reads a line from the socket. A line is terninated by \r\n.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.PooledSocket.SendCommand(System.String)">
            <summary>
            Sends the command to the server. The trailing \r\n is automatically appended.
            </summary>
            <param name="value">The command to be sent to the server.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Enyim.Caching.Memcached.PooledSocket.GetCommandBuffer(System.String)" -->
        <member name="M:Enyim.Caching.Memcached.PooledSocket.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the server into the specified buffer.
            </summary>
            <param name="buffer">An array of <see cref="T:System.Byte"/> that is the storage location for the received data.</param>
            <param name="offset">The location in buffer to store the received data.</param>
            <param name="count">The number of bytes to read.</param>
            <remarks>This method blocks and will not return until the specified amount of bytes are read.</remarks>
        </member>
        <member name="M:Enyim.Caching.Memcached.PooledSocket.ReadResponse">
            <summary>
            Reads the response of the server.
            </summary>
            <returns>The data sent by the memcached server.</returns>
            <exception cref="T:System.InvalidOperationException">The server did not sent a response or an empty line was returned.</exception>
            <exception cref="T:Enyim.Caching.Memcached.MemcachedException">The server did not specified any reason just returned the string ERROR. - or - The server returned a SERVER_ERROR, in this case the Message of the exception is the message returned by the server.</exception>
            <exception cref="T:Enyim.Caching.Memcached.MemcachedClientException">The server did not recognize the request sent by the client. The Message of the exception is the message returned by the server.</exception>
        </member>
        <member name="T:Enyim.Reflection.IFastObjectFacory">
            <summary>
            This property supports the <see cref="T:FastActivator"/> and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StoreMode.Add">
            <summary>
            Store the data, but only if the server does not already hold data for a given key
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StoreMode.Replace">
            <summary>
            Store the data, but only if the server does already hold data for a given key
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StoreMode.Set">
            <summary>
            Store the data, overwrite if already exist
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StoreCommand.Add">
            <summary>
            Store the data, but only if the server does not already hold data for a given key
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StoreCommand.Replace">
            <summary>
            Store the data, but only if the server does already hold data for a given key
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StoreCommand.Set">
            <summary>
            Store the data, overwrite if already exist
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StoreCommand.Append">
            <summary>
            Appends the data to an existing key's data
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StoreCommand.Prepend">
            <summary>
            Inserts the data before an existing key's data
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StoreCommand.CheckAndSet">
            <summary>
            Stores the data only if it has not been updated by someone else. Uses a "transaction id" to check for modification.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.SingleNodeLocator">
            <summary>
            This is a simple node locator with no computation overhead, always returns the first server from the list. Use only in single server deployments.
            </summary>
        </member>
        <member name="T:Enyim.Caching.UIntEqualityComparer">
            <summary>
            A fast comparer for dictionaries indexed by UInt. Faster than using Comparer.Default
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.CacheItem">
            <summary>
            Represents an object either being retrieved from the cache
            or being sent to the cache.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.CacheItem.Data">
            <summary>
            The data representing the item being stored/retireved.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.CacheItem.Flag">
            <summary>
            Flags set for this instance.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Configuration.SocketPoolElement">
            <summary>
            Configures the socket pool settings for Memcached servers.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Configuration.SocketPoolElement.MinPoolSize">
            <summary>
            Gets or sets a value indicating the minimum amount of sockets per server in the socket pool.
            </summary>
            <returns>The minimum amount of sockets per server in the socket pool.</returns>
        </member>
        <member name="P:Enyim.Caching.Configuration.SocketPoolElement.MaxPoolSize">
            <summary>
            Gets or sets a value indicating the maximum amount of sockets per server in the socket pool.
            </summary>
            <returns>The maximum amount of sockets per server in the socket pool.</returns>
        </member>
        <member name="P:Enyim.Caching.Configuration.SocketPoolElement.ConnectionTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which the connection attempt will fail.
            </summary>
            <returns>The value of the connection timeout. The default is 10 seconds.</returns>
        </member>
        <member name="P:Enyim.Caching.Configuration.SocketPoolElement.DeadTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which an unresponsive (dead) server will be checked if it is working.
            </summary>
            <returns>The value of the dead timeout. The default is 2 minutes.</returns>
        </member>
        <member name="T:Enyim.FnvHash64">
            <summary>
            Implements a 64 bit long Fowler-Noll-Vo hash
            </summary>
            <remarks>
            Calculation found at http://lists.danga.com/pipermail/memcached/2007-April/003846.html, but 
            it is pretty much available everywhere
            </remarks>
        </member>
        <member name="M:Enyim.Caching.Memcached.ServerStats.GetValue(System.Net.IPEndPoint,Enyim.Caching.StatItem)">
            <summary>
            Gets a stat value for the specified server.
            </summary>
            <param name="server">The adress of the server. If <see cref="F:System.Net.IPAddress.Any"/> is specified it will return the sum of all server stat values.</param>
            <param name="item">The stat to be returned</param>
            <returns>The value of the specified stat item</returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.ServerStats.GetVersion(System.Net.IPEndPoint)">
            <summary>
            Returns the server of memcached running on the specified server.
            </summary>
            <param name="server">The adress of the server</param>
            <returns>The version of memcached</returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.ServerStats.GetUptime(System.Net.IPEndPoint)">
            <summary>
            Returns the uptime of the specific server.
            </summary>
            <param name="server">The adress of the server</param>
            <returns>A value indicating how long the server is running</returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.ServerStats.GetRaw(System.Net.IPEndPoint,System.String)">
            <summary>
            Returns the stat value for a specific server. The value is not converted but returned as the server returned it.
            </summary>
            <param name="server">The adress of the server</param>
            <param name="key">The name of the stat value</param>
            <returns>The value of the stat item</returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.ServerStats.GetRaw(System.Net.IPEndPoint,Enyim.Caching.StatItem)">
            <summary>
            Returns the stat value for a specific server. The value is not converted but returned as the server returned it.
            </summary>
            <param name="server">The adress of the server</param>
            <param name="key">The stat value to be returned</param>
            <returns>The value of the stat item</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Enyim.TigerHash" -->
        <member name="F:Enyim.Caching.StatItem.Uptime">
            <summary>
            The number of seconds the server has been running.
            </summary>
        </member>
        <member name="F:Enyim.Caching.StatItem.ServerTime">
            <summary>
            Current time according to the server.
            </summary>
        </member>
        <member name="F:Enyim.Caching.StatItem.Version">
            <summary>
            The version of the server.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.ServerPool.callback_isAliveTimer(System.Object)">
            <summary>
            Checks if a dead node is working again.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Enyim.Caching.Memcached.ServerPool.MarkAsDead(Enyim.Caching.Memcached.MemcachedNode)">
            <summary>
            Marks a node as dead (unusable)
             - moves hte node to the  "dead list"
             - recreates the locator based on the new list of still functioning servers
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Enyim.Caching.Memcached.ServerPool.LocateNode(System.String)">
            <summary>
            Finds the <see cref="T:MemcachedNode"/> which is responsible for the specified item
            </summary>
            <param name="itemKey"></param>
            <returns></returns>
        </member>
        <member name="P:Enyim.Caching.Memcached.ServerPool.KeyTransformer">
            <summary>
            Returns the <see cref="t:IKeyTransformer"/> instance used by the pool
            </summary>
        </member>
    </members>
</doc>
